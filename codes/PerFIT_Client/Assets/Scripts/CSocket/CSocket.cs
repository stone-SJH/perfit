//------------------------------------------------------------------------------
// <auto-generated>
//     姝や唬鐮佺敱宸ュ叿鐢熸垚銆?
//     杩愯鏃剁増鏈?4.0.30319.34014
//
//     瀵规鏂囦欢鐨勬洿鏀瑰彲鑳戒細瀵艰嚧涓嶆纭殑琛屼负锛屽苟涓斿鏋?
//     閲嶆柊鐢熸垚浠ｇ爜锛岃繖浜涙洿鏀瑰皢浼氫涪澶便€?
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Linq;
using System.Collections.Generic;
using Client.FileOp;
using System.IO;

namespace Client.CS
{
	public class CSocket
	{
		private const string _SUCCESS = "success";
		private string _filePath;
		static private IPAddress _ip;
		static private IPEndPoint _ipe;
		static private Socket _socket;
		
		//鍒濆鍖?
		public CSocket (string add, int port)
		{
			_ip = IPAddress.Parse(add);
			_ipe = new IPEndPoint(_ip, port);
			_socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);  
			_filePath = Environment.CurrentDirectory + "\\";
		}
		
		//寮€鍚繛鎺?
		public void StartConnection()
		{
			try
			{
				_socket.Connect(_ipe);//start connection
				Console.WriteLine("Connection success!");
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//鍏抽棴杩炴帴
		public void CloseConnection()
		{
			try
			{
				SendString("closeconnection");
				_socket.Close();//close connection
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//浠tring鐨勫舰寮忓悜鏈嶅姟鍣ㄥ彂閫佹暟鎹?
		private void SendString(string  message)
		{
			int length = message.Length;
			message = length.ToString() + ' ' + message;
			byte[] sendBuf = Encoding.UTF8.GetBytes(message);
			try
			{
				_socket.Send(sendBuf, sendBuf.Length, 0);//send message
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//浠yte[]鐨勫舰寮忓悜鏈嶅姟鍣ㄥ彂閫佹暟鎹?
		private void SendByte(byte[] message)
		{
			try
			{
				_socket.Send(message);
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//浠tring鐨勫舰寮忎粠鏈嶅姟鍣ㄦ帴鏀舵暟鎹?
		private string RecvString()
		{
			string message = "";
			int recvLength;
			byte[] recvBuf = new byte[1024];
			try
			{
				recvLength = _socket.Receive(recvBuf, recvBuf.Length, 0);
				message += Encoding.ASCII.GetString(recvBuf, 0, recvLength);//receive message
			}
			catch (SocketException e)
			{
				throw e;
			}
			return message;
		}
		
		private byte[] RecvByte(int length)
		{
			try
			{
				byte[] buf = new byte[length];
				_socket.Receive(buf, length, SocketFlags.None);
				return buf;
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//鍙戦€佹枃浠?
		public void SendFile(string filename, out string ret)
		{
			ret = "";
			string path = _filePath + filename;
			List<byte[]> content;
			new FileOperation(path).ReadContentBinary(out content);
			string message = "sendfile " + filename;
			message += ' ' + content.Count.ToString() + ' ' + content[content.Count - 1].Length.ToString();
			try
			{
				SendString(message);
				ret = RecvString();
				if (ret != _SUCCESS)
				{
					return;
				}
				for (int i = 0; i < content.Count; i++)
				{
					byte[] buf = content[i];
					SendByte(buf);
					if ((ret = RecvString()) != _SUCCESS)
					{
						return;
					}
				}
				ret = RecvString();
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		public void SendStatistic(string filename, out string ret)
		{
			ret = "";
		}
		
		//鎺ユ敹鏂囦欢
		public void RecvFile(string filename, out string ret)
		{
			ret = "";
			string path = _filePath + filename;
			string message = "recvfile " + filename;
			List <byte[]> content = new List<byte[]>();
			try
			{
				SendString(message);
				ret = RecvString();
				string[] mess = ret.Split(' ');
				int size = int.Parse(mess[0]);
				int lastSize = int.Parse(mess[1]);
				for (int i = 0; i < size; i++)
				{
					SendString("success");
					int length = 1000;
					if (i == size - 1)
					{
						length = lastSize;
					}
					content.Add(RecvByte(length));
				}
				new FileOperation(path).ClearFile();
				new FileOperation(path).WriteContentBinary(content);
				ret = "success";
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//娉ㄥ唽
		public void Register(string username, string password, out string ret)
		{
			ret = "failure";
			string message = "register " + username + ' ' + password;
			try
			{
				SendString(message);
				ret = RecvString();
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		//鐧婚檰
		public void Login(string username, string password, out string ret)
		{
			ret = "failure";
			string message = "login " + username + ' ' + password;
			try
			{
				SendString(message);
				ret = RecvString();
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		
		public void CheckFile(out List<string> ret)
		{
			ret = new List<string>();
			string message = "checkfile";
			try
			{
				SendString(message);
				string recvMessage = RecvString();
				SendString("success");
				string[] mess = recvMessage.Split(' ');
				int size = int.Parse(mess[0]);
				List<int> stringLength = new List<int>();
				for (int i = 1; i <= size; i++ )
				{
					stringLength.Add(int.Parse(mess[i]));
				}
				for (int i = 0; i < size; i++)
				{
					byte[] buf = RecvByte(stringLength[i]);
					ret.Add(System.Text.Encoding.UTF8.GetString(buf));
					SendString("success");
				}
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		public void CheckMovie(string flag, out List<string> ret)
		{
			ret = new List<string>();
			string message = "checkmovie " + flag;
			try
			{
				SendString(message);
				string recvMessage = RecvString();
				SendString("success");
				string[] mess = recvMessage.Split(' ');
				int size = int.Parse(mess[0]);
				List<int> stringLength = new List<int>();
				for (int i = 1; i <= size; i++)
				{
					stringLength.Add(int.Parse(mess[i]));
				}
				for (int i = 0; i < size; i++)
				{
					byte[] buf = RecvByte(stringLength[i]);
					ret.Add(System.Text.Encoding.UTF8.GetString(buf));
					SendString("success");
				}
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		
		public void ModifyPass(string username, string password, out string ret)
		{
			SendString("modifypass " + username + " " + password);
			ret = "";
			ret = RecvString();
		}
		
		public void ModifyInfo(string username, double hei, double wei, out string ret)
		{
			string height = hei.ToString("f2");
			string weight = wei.ToString("f2");
			SendString("modifyinfo " + username + " " + height + " " + weight);
			ret = "";
			ret = RecvString();
		}
		
		public void RecvMovie(string filename, string flag, out string ret)
		{
			ret = "";
			string path = _filePath + filename;
			string message = "recvmovie " + filename + " " + flag;
			List<byte[]> content = new List<byte[]>();
			try
			{
				SendString(message);
				ret = RecvString();
				string[] mess = ret.Split(' ');
				int size = int.Parse(mess[0]);
				int lastSize = int.Parse(mess[1]);
				for (int i = 0; i < size; i++)
				{
					SendString("success");
					int length = 1000;
					if (i == size - 1)
					{
						length = lastSize;
					}
					content.Add(RecvByte(length));
				}
				new FileOperation(path).ClearFile();
				new FileOperation(path).WriteContentBinary(content);
				ret = "success";
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		public void SendMovie(string filename, string flag, out string ret)
		{
			ret = "";
			string path = _filePath + filename;
			List<byte[]> content;
			new FileOperation(path).ReadContentBinary(out content);
			string message = "sendmovie " + filename;
			message += ' ' + content.Count.ToString() + ' ' + content[content.Count - 1].Length.ToString() + " " + flag;
			try
			{
				SendString(message);
				ret = RecvString();
				if (ret != _SUCCESS)
				{
					return;
				}
				for (int i = 0; i < content.Count; i++)
				{
					byte[] buf = content[i];
					SendByte(buf);
					if ((ret = RecvString()) != _SUCCESS)
					{
						return;
					}
				}
				ret = RecvString();
			}
			catch (SocketException e)
			{
				throw e;
			}
		}
		
		
		public void HandHandle(string stra, string strb, out string ret)
		{
			ret = "";
			string ret1,  ret2, ret3, ret4, ret5, ret6;
			SendMovie(stra, "hand", out ret1);
			SendFile(strb, out ret2);
			SendString("handhandle " + stra + " " + strb);
			ret3 = RecvString();
			RecvFile(ret3 + "left_hand_result.txt", out ret4);
			RecvFile(ret3 + "right_hand_result.txt", out ret4);
			if (File.Exists("left_hand_result.txt"))
			{
				File.Delete("left_hand_result.txt");
			}
			if (File.Exists("right_hand_result.txt"))
			{
				File.Delete("right_hand_result.txt");
			}
			File.Move(ret3 + "left_hand_result.txt", "left_hand_result.txt");
			File.Move(ret3 + "right_hand_result.txt", "right_hand_result.txt");
			RecvFile("lefthand_history.txt", out ret5);            
			RecvFile("righthand_history.txt", out ret6);
			ret = "success";
		}
		
		public void ShoulderHandle(string str, out string ret)
		{
			ret = "";
			string ret1, ret2, ret3;
			SendFile(str, out ret1);
			SendString("shoulderhandle " + str);
			ret3 = RecvString();
			RecvFile(ret3 + "shoulder_result.txt", out ret2);
			if (File.Exists("shoulder_result.txt"))
			{
				File.Delete("shoulder_result.txt");
			}
			File.Move(ret3 + "shoulder_result.txt", "shoulder_result.txt");
			RecvFile("shoulder_history.txt", out ret3);
			ret = "success";
		}
		
		public void PushupHandle(string str, out string ret)
		{
			ret = "";
			string ret1, ret2, ret3;
			SendFile(str, out ret1);
			SendString("pushuphandle " + str);
			ret3 = RecvString();
			RecvFile(ret3 + "pushup_result.txt", out ret2);
			if (File.Exists("pushup_result.txt"))
			{
				File.Delete("pushup_result.txt");
			}
			File.Move(ret3 + "pushup_result.txt", "pushup_result.txt");
			RecvFile("pushup_history.txt", out ret3);
			ret = "success";
		}
	}
}

